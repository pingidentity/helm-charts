############################################################
# Ping Identity DevOps values.yaml
############################################################
# The yaml is seperated into 2 major sections:
#  - global - Represents the base set of values that will
#             be used for each product, if that product
#             doesn't override the global values.
#
#  - image  - For every image/product, the values will
#             be merged with the global settings, and
#             take precedence.
############################################################

############################################################
# Global values
############################################################
global:
  ############################################################
  #  addReleaseNameToResource: Provides global ability to add
  #                            names to kubernetes resources
  #                      none: No use of Release.Name
  #                    append: Appends the Release.Name
  #                   prepend: Prepends the Release.Name ** DEFAULT **
  ############################################################
  addReleaseNameToResource: prepend
  ############################################################
  # Ingress
  #
  #          ingress.enabled: {true | false}
  # ingress.addReleaseToHost: {prepend | append | subdomain | none}
  #    ingress.defaultDomain: Replaces with "_defaultDomain_" in host fields
  # ingress.defaultTlsSecret: Replaces with "_defaultTlsSecret_" in tls.secretName
  ############################################################
  ingress:
    enabled: false
    addReleaseNameToHost: subdomain
    defaultDomain: example.com
    defaultTlsSecret:
    annotations: {}
      # nginx example
      # nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
      # kubernetes.io/ingress.class: "nginx-public"

  ############################################################
  # Internal Certificates
  #
  # If set to true, then an internal certificate secret will
  # be created along with mount of the certificate in
  # /run/secrets/internal-cert (creates a tls.crt and tls.key)
  ############################################################
  privateCert:
    generate: false

  ############################################################
  # Fields used to annotate secret hashicorp vault information
  #
  # https://www.vaultproject.io/docs/platform/k8s/injector/annotations
  ############################################################
  vault:
    enabled: false
    hashicorp:
      role: k8s-default
      log-level: info
      preserve-secret-case: true
      secret-volume-path: /run/secrets
      pre-populate-only: true
      serviceAccountName: vault-auth
      # secretPrefix: path/to/secrets
      # secrets:
      # - name: secret-name
      #   secret: secret-name
      # annotations:
      #   auth-path: auth/kubernetes2
      #   tls-secret: vault-tls

  ############################################################
  # Image
  #
  # By default the images uses will be indicated by these
  # variables.  An example might look like:
  #
  #   pingidentity/pingdataconsole:2101
  #
  # NOTE: image.name MUST be set in child chart
  #   Example: image.name: pingfederate
  ############################################################
  image:
    repository: pingidentity
    name:
    tag: "2101"
    pullPolicy: Always

  ############################################################
  # External Images
  #
  # Provides ability to use external images for various purposes
  # such as using curl.
  ############################################################
  externalImage:
    # pingtoolkit - based on alpine
    pingtoolkit: pingidentity/pingtoolkit:latest

  ############################################################
  # Services
  #
  # Creates services mapping a port to a targetPort on the
  # corresponding container.
  #
  # dataService    - If set to true, a ClusterIP service is
  #                  created reachable within the cluster.
  #                  A single IP is provided and the service
  #                  will round-robin across the backend containers.
  #
  # clusterService - If set to true, a "headless" service is
  #                  explicityly specifyig "None" for the
  #                  clusterIP.  DNS requests to this service
  #                  will provide one of the IPs of the backend
  #                  containers.
  #
  # https://kubernetes.io/docs/concepts/services-networking/service/
  ############################################################
  services: {}
  #  admin:
  #    containerPort: 9999
  #    servicePort: 9999
  #    ingressPort: 9999
  #    dataService: true
  #  clusterbind:
  #    containerPort: 7600
  #    servicePort: 7600
  #    clusterService: true
  #  clusterfail:
  #    containerPort: 7700
  #    servicePort: 7700
  #    clusterService: true
  #  clusterExternalDNSHostname:


  ############################################################
  # Workload
  #
  # Two workloads supported:
  #  - Deployment
  #  - StatefulSet
  #
  # https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
  ############################################################
  workload:
    # Can be Deployment or StatefulSet (see warning above)
    type: Deployment

    deployment:
      strategy:
        # Can be RollingUpdate or Recreate
        type: RollingUpdate
        rollingUpdate:
          maxSurge: 1
          maxUnavailable: 0

    statefulSet:
      # Used for canary testing if n>0
      partition: 0

      ############################################################
      # Persistent Volumes
      #
      # For every volume defined in the volumes list, 3 items will be
      # created in the StatefulSet
      #   1. container.volumeMounts - name and mountPath
      #   2. template.spec.volume - name and persistentVolumeClaim.claimName
      #   3. spec.volumeClaimTemplates - persistentVolumeClaim
      #
      # https://kubernetes.io/docs/concepts/storage/persistent-volumes/
      ############################################################
      persistentvolume:
        enabled: true
        volumes:
          out-dir:
            mountPath: /opt/out
            persistentVolumeClaim:
              accessModes:
              - ReadWriteOnce
              storageClassName:
              resources:
                requests:
                  storage: 4Gi

    # securityContext
    #
    # Note: the majority of images will have issues when running with a
    #       security context set by k8s, due to expecations of file system
    #       permissions and ports.  Use with caution
    # Currently unable to use - readOnlyRootFilesystem: true
    securityContext: {}
      # allowPrivilegeEscalation: false
      # capabilities:
      #   drop:
      #   - ALL
      # runAsGroup: 1000
      # runAsNonRoot: true
      # runAsUser: 100

  ############################################################
  # Container Information
  #
  # https://kubernetes.io/docs/concepts/workloads/controllers/
  ############################################################
  container:
    # replicaCount - Instructs Deployment/StatefulSet now many containers to run
    replicaCount: 1

    # resources - Reqeust  0 cpu/0 GB
    #             Limit    4 cpu/0 GB
    resources:
      requests:
        cpu: 0
        memory: 0
      limits:
        cpu: 0
        memory: 0
    nodeSelector: {}
    tolerations: []
    affinity: {}
    terminationGracePeriodSeconds: 30

    envFrom: []
    # Additional envFrom configmap/secret references can be added
    # envFrom:
    # - configMapRef:
    #     name: my-example-configmap
    #     optional: true
    # - secretRef:
    #     name: my-example-secrets
    #     optional: true

  ############################################################
  # Probes
  #
  # Probes have a number of fields that you can use to more precisely control the
  # behavior of liveness and readiness checks.
  #
  # https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
  ############################################################
  probes:
    liveness:
      command: /opt/liveness.sh
      initialDelaySeconds: 30
      periodSeconds: 30
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 4
    readiness:
      command: /opt/liveness.sh
      initialDelaySeconds: 30
      periodSeconds: 5
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 4

  ############################################################
  # Licensing
  #
  # license.secret.devOps
  #    Identify the k8s secret to keep the DevOps USER/KEY if used during deployement.
  #
  # NOTE: licenseSecretName can be set in deploying chart values to specify a secret
  #       with actual product license.  This would override the DevOps secret.
  #
  # Using ping-devops utility:
  #    ping-devops generate devops-secret | kubectl apply -f -
  ############################################################
  license:
    secret:
      devOps: devops-secret


#############################################################
# Image/Product values
#############################################################

#############################################################
# ldap-sdk-tools values
#############################################################
ldap-sdk-tools:
  enabled: false
  name: ldap-sdk-tools
  image:
    name: "ldap-sdk-tools"
    tag: edge

  container:
    command: "tail -f /dev/null"

  probes:
    liveness:
      command: echo
    readiness:
      command: echo

#############################################################
# pingfederate-admin values
#############################################################
pingfederate-admin:
  enabled: false
  name: pingfederate-admin
  image:
    name: pingfederate

  container:
    resources:
      requests:
        cpu: 0
        memory: 1Gi
      limits:
        cpu: 2
        memory: 4Gi

  workload:
    deployment:
      strategy:
        type: Recreate

  # Example: If PingFederate Admin relies on pingdirectory for AuthN
  #          Creates init container wait-for on pingdirectory ldaps service
  #
  # container:
  #   waitFor:
  #     pingdirectory:
  #       service: ldaps
  #       timeoutSeconds: 300

  envs:
    SERVER_PROFILE_URL: https://github.com/pingidentity/pingidentity-server-profiles.git
    SERVER_PROFILE_PATH: getting-started/pingfederate

  # Example: Pulling in a secret (called pingfederate-license) into container
  #          mounting the name (license) value into a file (/opt/in/.../pingfederate.lic)
  #
  # secretVolumes:
  #   pingfederate-license:
  #     items:
  #       license: /opt/in/instance/server/default/conf/pingfederate.lic

  # Example: Pulling in a configMap (called pingfederate-props) into container
  #          mounting the name (pf-props) value into a file (/opt/in/.../pingfederate.properties)
  #
  # configMapVolumes:
  #  pingfederate-props:
  #     items:
  #      pf-props: /opt/in/etc/pingfederate.properties

  services:
    https:
      servicePort: 9999
      containerPort: 9999
      ingressPort: 443
      dataService: true
    clusterbind:
      servicePort: 7600
      containerPort: 7600
      clusterService: true
    clusterfail:
      servicePort: 7700
      containerPort: 7700
      clusterService: true
    clusterExternalDNSHostname:

  ingress:
    hosts:
      - host: pingfederate-admin._defaultDomain_
        paths:
        - path: /
          backend:
            serviceName: https
    tls:
      - secretName: _defaultTlsSecret_
        hosts:
          - pingfederate-admin._defaultDomain_

#############################################################
# pingfederate-engine values
#############################################################
pingfederate-engine:
  enabled: false
  name: pingfederate-engine
  image:
    name: pingfederate

  container:
    resources:
      requests:
        cpu: 0
        memory: 1Gi
      limits:
        cpu: 2
        memory: 4Gi
    waitFor:
      pingfederate-admin:
        service: https
        timeoutSeconds: 300

  envs:
    SERVER_PROFILE_URL: https://github.com/pingidentity/pingidentity-server-profiles.git
    SERVER_PROFILE_PATH: getting-started/pingfederate
    PF_ADMIN_PORT: "9999"

  clustering:
    autoscaling:
      enabled: true
      minReplicas: 1
      maxReplicas: 4
      targetCPUUtilizationPercentage: 75
      # targetMemoryUtilizationPercentage: 50

    autoscalingTemplate: []
    # Custom or additional autoscaling metrics
    # ref: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/#support-for-custom-metrics
    # - type: Pods
    #   pods:
    #     metric:
    #       name: custommetric
    #     target:
    #       type: AverageValue
    #       averageValue: 10000m

  services:
    https:
      servicePort: 9031
      containerPort: 9031
      ingressPort: 443
      dataService: true
    clusterbind:
      servicePort: 7600
      containerPort: 7600
      clusterService: true
    clusterfail:
      servicePort: 7700
      containerPort: 7700
      clusterService: true
    clusterExternalDNSHostname:

  ingress:
    hosts:
      - host: pingfederate-engine._defaultDomain_
        paths:
        - path: /
          backend:
            serviceName: https
    tls:
      - secretName: _defaultTlsSecret_
        hosts:
          - pingfederate-engine._defaultDomain_

#############################################################
# pingdirectory values
#############################################################
pingdirectory:
  enabled: false
  name: pingdirectory
  image:
    name: pingdirectory

  container:
    replicaCount: 2
    resources:
      requests:
        cpu: 0
        memory: 2Gi
      limits:
        cpu: 2
        memory: 8Gi

    terminationGracePeriodSeconds: 300
    # Example affinity for typical directory installation
    #
    # affinity:
    #   podAntiAffinity:
    #     # Add a hard requirement for each PD pod to be deployed to a different node
    #     requiredDuringSchedulingIgnoredDuringExecution:
    #     - labelSelector:
    #         matchExpressions:
    #         - key: app.kubernetes.io/name
    #           operator: In
    #           values:
    #           - pingdirectory
    #       topologyKey: "kubernetes.io/hostname"
    #     # Add a soft requirement for each PD pod to be deployed to a different AZ
    #     preferredDuringSchedulingIgnoredDuringExecution:
    #     - weight: 1
    #       podAffinityTerm:
    #         labelSelector:
    #           matchExpressions:
    #           - key: app.kubernetes.io/name
    #             operator: In
    #             values:
    #             - pingdirectory
    #         topologyKey: "failure-domain.beta.kubernetes.io/zone"     <--- kubernetes prior to 1.17
    #         topologyKey: "topology.kubernetes.io/region"              <--- kubernetes 1.17+

  workload:
    type: StatefulSet
    statefulSet:
      persistentvolume:
        volumes:
          out-dir:
            persistentVolumeClaim:
              resources:
                requests:
                  storage: 8Gi

  envs:
    SERVER_PROFILE_URL: https://github.com/pingidentity/pingidentity-server-profiles.git
    SERVER_PROFILE_PATH: baseline/pingdirectory
    MAKELDIF_USERS: "20000"

  services:
    ldap:
      servicePort: 389
      containerPort: 389
      dataService: true
    ldaps:
      servicePort: 636
      containerPort: 636
      dataService: true
      clusterService: true
    https:
      servicePort: 443
      containerPort: 443
      ingressPort: 443
      dataService: true

  ingress:
    hosts:
      - host: pingdirectory._defaultDomain_
        paths:
        - path: /
          backend:
            serviceName: https
    tls:
      - secretName: _defaultTlsSecret_
        hosts:
          - pingdirectory._defaultDomain_

  probes:
    liveness:
      failureThreshold: 120
    readiness:
      periodSeconds: 30
      failureThreshold: 4

#############################################################
# pingdelegator values
#############################################################
pingdelegator:
  enabled: false
  name: pingdelegator
  image:
    name: pingdelegator

  container:
    resources:
      requests:
        cpu: 0
        memory: 32Mi
      limits:
        cpu: 500m
        memory: 64Mi

  publicPort: 443

  tokenProvider:
    port: 9031
    clientId: dadmin

  pingDirectoryServer:
    port: 443

  envs:
    SERVER_PROFILE_URL: https://github.com/pingidentity/pingidentity-server-profiles.git
    SERVER_PROFILE_PATH: baseline/pingdelegator

  services:
    https:
      servicePort: 6443
      containerPort: 6443
      ingressPort: 443
      dataService: true

  ingress:
    hosts:
      - host: pingdelegator._defaultDomain_
        paths:
        - path: /
          backend:
            serviceName: https
    tls:
      - secretName: _defaultTlsSecret_
        hosts:
          - pingdelegator._defaultDomain_

#############################################################
# pingdatasync values
#############################################################
pingdatasync:
  enabled: false
  name: pingdatasync
  image:
    name: pingdatasync

  container:
    resources:
      requests:
        cpu: 0
        memory: .75Gi
      limits:
        cpu: 2
        memory: 2Gi

  envs:
    SERVER_PROFILE_URL: https://github.com/pingidentity/pingidentity-server-profiles.git
    SERVER_PROFILE_PATH: simple-sync/pingdatasync

  services:
    ldaps:
      servicePort: 636
      containerPort: 636
      clusterService: true
    https:
      servicePort: 443
      containerPort: 443
      dataService: true

#############################################################
# pingdatagovernance values
#############################################################
pingdatagovernance:
  enabled: false
  name: pingdatagovernance
  image:
    name: pingdatagovernance

  container:
    resources:
      requests:
        cpu: 0
        memory: 1.5Gi
      limits:
        cpu: 2
        memory: 4Gi

  envs:
    SERVER_PROFILE_URL: https://github.com/pingidentity/pingidentity-server-profiles.git
    SERVER_PROFILE_PATH: baseline/pingdatagovernance-8.1.0.0

  services:
    https:
      servicePort: 443
      containerPort: 443
      ingressPort: 443
      dataService: true
    ldaps:
      servicePort: 636
      containerPort: 636
      clusterService: true

  ingress:
    hosts:
      - host: pingdatagovernance._defaultDomain_
        paths:
        - path: /
          backend:
            serviceName: https
    tls:
      - secretName: _defaultTlsSecret_
        hosts:
          - pingdatagovernance._defaultDomain_

#############################################################
# pingdatagovernancepap values
#############################################################
pingdatagovernancepap:
  enabled: false
  name: pingdatagovernancepap
  image:
    name: pingdatagovernancepap

  container:
    resources:
      requests:
        cpu: 0
        memory: .75Gi
      limits:
        cpu: 2
        memory: 2Gi

  envs:
    SERVER_PROFILE_URL: https://www.github.com/pingidentity/pingidentity-server-profiles.git
    SERVER_PROFILE_PATH: pdg-pap-integration/pingdatagovernancepap
    HTTPS_PORT: "8443"
  services:
    https:
      servicePort: 8443
      containerPort: 8443
      ingressPort: 443
      dataService: true

  ingress:
    hosts:
      - host: pingdatagovernancepap._defaultDomain_
        paths:
        - path: /
          backend:
            serviceName: https
    tls:
      - secretName: _defaultTlsSecret_
        hosts:
          - pingdatagovernancepap._defaultDomain_

#############################################################
# pingaccess-admin values
#############################################################
pingaccess-admin:
  enabled: false
  name: pingaccess-admin
  image:
    name: pingaccess

  container:
    resources:
      requests:
        cpu: 0
        memory: 1Gi
      limits:
        cpu: 2
        memory: 4Gi

  # Example: If PingAccess Admin relies on pingfederate-admin for AuthN
  #          Creates init container wait-for on pingfederate-admin https service
  #
  # container:
  #   waitFor:
  #     pingfederate-admin:
  #       service: https
  #       timeoutSeconds: 300

  envs:
    SERVER_PROFILE_URL: https://github.com/pingidentity/pingidentity-server-profiles.git
    SERVER_PROFILE_PATH: getting-started/pingaccess

  services:
    https:
      servicePort: 9000
      containerPort: 9000
      ingressPort: 443
      dataService: true
    clusterconfig:
      servicePort: 9090
      containerPort: 9090
      dataService: true

  ingress:
    hosts:
      - host: pingaccess-admin._defaultDomain_
        paths:
        - path: /
          backend:
            serviceName: https
    tls:
      - secretName: _defaultTlsSecret_
        hosts:
          - pingaccess-admin._defaultDomain_

#############################################################
# pingaccess-engine values
#############################################################
pingaccess-engine:
  enabled: false
  name: pingaccess-engine
  image:
    name: pingaccess

  container:
    resources:
      requests:
        cpu: 0
        memory: 1Gi
      limits:
        cpu: 2
        memory: 4Gi
    waitFor:
      pingaccess-admin:
        service: https
        timeoutSeconds: 300

  envs:
    SERVER_PROFILE_URL: https://github.com/pingidentity/pingidentity-server-profiles.git
    SERVER_PROFILE_PATH: getting-started/pingaccess

  services:
    https:
      servicePort: 3000
      containerPort: 3000
      ingressPort: 443
      dataService: true

  ingress:
    hosts:
      - host: pingaccess-engine._defaultDomain_
        paths:
        - path: /
          backend:
            serviceName: https
    tls:
      - secretName: _defaultTlsSecret_
        hosts:
          - pingaccess-engine._defaultDomain_

#############################################################
# pingdataconsole values
#############################################################
pingdataconsole:
  enabled: false
  name: pingdataconsole
  image:
    name: pingdataconsole

  container:
    resources:
      requests:
        cpu: 0
        memory: .5Gi
      limits:
        cpu: 2
        memory: 2Gi

  defaultLogin:
    server:
      host: pingdirectory
      port: 636
    username: administrator

  envs:
    SERVER_PROFILE_URL: https://github.com/pingidentity/pingidentity-server-profiles.git
    SERVER_PROFILE_PATH: baseline/pingdataconsole

  services:
    https:
      containerPort: 8443
      servicePort: 8443
      ingressPort: 443
      dataService: true

  ingress:
    hosts:
      - host: pingdataconsole._defaultDomain_
        paths:
        - path: /
          backend:
            serviceName: https
    tls:
      - secretName: _defaultTlsSecret_
        hosts:
          - pingdataconsole._defaultDomain_

#############################################################
# pd-replication-timing values
#############################################################
pd-replication-timing:
  enabled: false
  name: pd-replication-timing
  image:
    name: pingtoolkit

  envs:
    SERVER_PROFILE_URL: https://www.github.com/pingidentity/pingidentity-server-profiles
    SERVER_PROFILE_PATH: dsreplication-timing
    STARTUP_COMMAND: /opt/out/instance/bin/start-server
    STARTUP_BACKGROUND_OPTS: ""
